package com.abhishek.test1;

import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;

public class DAL {
	DatastoreService ds;

	DAL() {
		ds = DatastoreServiceFactory.getDatastoreService();
	}

	/*
	 * @param
	 *  e is the reference to new entity created.
	 *  m is the (property,value) pair for that entity.
 	 * */
	static Entity setProperty(Entity e, Map<String, String> m) {
		Iterator<Entry<String, String>> it = m.entrySet().iterator();
		// setting all the attributes of the entity.
		while (it.hasNext()) {
			Map.Entry<String, String> pair = (Entry<String, String>) it.next();
			e.setProperty(pair.getKey(), pair.getValue());
		}
		return e;
	}

	/*
	 * Insert statements
	 * 
	 * @param Entity : the entity to be inserted
	 */
	void insert_user(Entity user) {
		// TODO: check for constraints put on user entity.
		ds.put(user);
	}

	void insert_content(Entity content) {
		// TODO: check for constraints put on content entity.
		ds.put(content);
	}

	void insert_trail(Entity trail) {
		// TODO: check for constraints put on trail entity.
		ds.put(trail);
	}

	void insert_trailItems(Entity trail_item) {
		// TODO: check for constraints put on trail item entity.
		ds.put(trail_item);
	}

	void insert_comment(Entity comment) {
		// TODO: check for constraints put on comment entity.
		ds.put(comment);
	}

	void insert_analytics(Entity analytics) {
		// TODO: check for constraints put on analytics entity.
		ds.put(analytics);
	}

	void insert_question(Entity question) {
		// TODO: check for constraints put on questions entity.
		ds.put(question);
	}

	void insert_answer_option(Entity answer_option) {
		// TODO: check for constraints put on answer option entity.
		ds.put(answer_option);
	}

	void insert_assessment(Entity assessment) {
		// TODO: check for constraints put on assessment entity.
		ds.put(assessment);
	}

	void insert_assessment_submission(Entity assessment_submission) {
		// TODO: check for constraints put on assessment_submission entity.
		ds.put(assessment_submission);
	}

	void insert_assessment_question(Entity assessment_question) {
		// TODO: check for constraints put on assessment_question entity.
		ds.put(assessment_question);
	}

	// TODO: add the extra tables remaining

}
